package com.Project.online_quiz.service;

import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.Project.online_quiz.model.Question;
import com.Project.online_quiz.model.Quiz;
import com.Project.online_quiz.model.QuizQuestions;
import com.Project.online_quiz.model.Response;
import com.Project.online_quiz.repository.QuestionRepository;
import com.Project.online_quiz.repository.QuizRepository;

@Service
public class QuizService {

	@Autowired
	QuizRepository quizRepository;
	
	@Autowired
	QuestionRepository questionRepository;
	
	public ResponseEntity<String> createQuiz(String category, int numQ, String title) {
		List<Question> questions = questionRepository.findRandomQuestionsByCategory(category, numQ);
		
		Quiz quiz = new Quiz();
		quiz.setTitle(title);
		quiz.setQuestions(questions);
		
		quizRepository.save(quiz);
		return new ResponseEntity<>("Success", HttpStatus.OK);
	}

	public ResponseEntity<List<QuizQuestions>> findQuestionsByQuizId(String id) {
		Optional<Quiz> quizOptional = quizRepository.findById(id);
	    
	    if (quizOptional.isPresent()) {
	        Quiz quiz = quizOptional.get();
	        List<Question> questions = quiz.getQuestions();
	        
	        // Convert Question objects to QuizQuestions DTO
	        List<QuizQuestions> quizQuestions = questions.stream().map(q -> {
	            QuizQuestions qq = new QuizQuestions();
	            qq.setTitle(q.getTitle());
	            qq.setOption1(q.getOption1());
	            qq.setOption2(q.getOption2());
	            qq.setOption3(q.getOption3());
	            qq.setOption4(q.getOption4());
	            return qq;
	        }).toList();

	        return new ResponseEntity<>(quizQuestions, HttpStatus.OK);
	    }
	    
	    return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}

	public ResponseEntity<Integer> calculateResult(String id, List<Response> responses) {
		//retrieving quiz using id
		Quiz quiz = quizRepository.findById(id).get();
		//getting questions from quiz
		List<Question> questions = quiz.getQuestions(); 
		int right = 0, i = 0;
		
		for(Response response : responses) {
			String responseAnswer = response.getResponse();
			String questionRightAnswer = questions.get(i).getRightAnswer();
			
			if(responseAnswer.equals(questionRightAnswer)) {
				right++;
			}
			i++;
		}
		return new ResponseEntity<Integer>(right, HttpStatus.OK);
		
	}


}
